My documentation for COM3505 assessment 1 (MyPro+UpdThing)
===
## Provisioning and OTA
**What is the purpose of provisioning? and (over-the-air) updating?**
Provisioning is the process of connecting a new (WiFi) device to a new WiFi network; it involves loading the SSID and login credentials for the network to allow the device to connect. 

Over-the-air updating allows the device firmware to be updated without having direct access to the device. This means that if the device detects a new firmware version in the cloud, it can download and install the new firmware version without the user needing phsyical access to the device.

**How has `MyPro+UpdThingIDF` chosen to implement these functions?**
Provisioning and OTA updating are handled by functions in the files `joinme-2019.cpp` and `joinme-wfmgr-2019.cpp`. 

The first of these files `joinme-2019.cpp` handles web page redirects and over-the-air updating; OTA updating only occurs if the device is connected to a WiFi network and has an internet connection. The function `joinmeOTAUpdate` checks the current firmware version number against the version number on gitlab; if they match then no action takes place. If they do not match, then this function will download the new firmware from git and installs it. Several output messages and a progress bar are displayed on the serial line.  When the project is compiled a `.bin` file is created which is stored in `firmware/<<version>>.bin`; this file name is what gets checked against the `main.cpp` class variable `firmwareVersion` by the `joinmeOTAUpdate` function. OTA updates can only be triggered by restarting the device.

When the device is started, it calls the function `joinmeManageWiFi`in the `joinme-wfmgr-2019.cpp` file. This function checks if the device has been configured and tries to connect to the network. If this fails, it creates is own access point as a captive portal with a list of networks. When the user chooses a network and provides the correct credentials, the device connects to the network and shuts down its own access point. 

## Security
**How Secure is the Implementation?**
The implementation not very secure. While the device is not connected to a WiFi network, anybody can connect to it and change the WiFi settings. It may also be possible to hijack the device by being connected to the same network, this also allows for someone to change the WiFi settings. Connecting to an unsecure or unknown network may allow a malicious firmware version to be uploaded to the device via OTA updating.

Some networks contain firewalls to prevent such attacks, these will restrict network access on a specific port. WiFi spoofing is also a possibility if somebody can create a network with the same credentials and spoof the access point, they would have access to all network traffic. This is usually only an issue on open or public networks though. Gitlab downloads use `https` rather than `http` which can pervent some types of attack. This firmware uses the WPA encryption to authenticate and connect to a network.


## Efficiency
**How Efficient is the Implementation?**
Caching the access point is not particularly efficient for this implementation since it takes energy and memory to do this every `X` seconds instead of just scanning when the user wants to change access point. The original implementation of scanning for access points was more efficient, and uses less memory and energy.


## Bugs and Improvements
**Are There [M]any bugs?**
There are almost no obvious bugs in the code, although further testing may reveal some. We did complete manual testing and found that there is a floating value which is returned from the `joinMeManageWifi` function that is never used. The function returns a boolean depending on if the device connects to a network, but the boolean is never used outside of the function which returns it. 

**How might it be improved?**


## Programming Style
**What is the Dominant Programming Style? What are its advantages and disadvantages?**




# Possible Enhancements

### Power Usage
**What levels of power usage are expected during provisioning and updating? What mechanisms do we have to reduce power consumption?**
Slightly higher levels of power consumption are to be expected during provisioning and updating. There is not much we can do to reduce this since these actions are necessary to connect to a network and update the firmware. Slightly higher power consumption also takes place when refreshing the AP cache every 2 seconds, this can be mitigated by either refreshing the AP cache less often, or only updating it when the user wants to change access point.

### Security Vulnerabilities
**What risidual security vulneratibilities does the firmware have? How can we fix them?**
The current implementation does not automatically do OTA updates. This is insecure if a vulnerability is found and the user doesn't update the device. You'd solve it by making the OTA update automatic by checking for a new firmware version every `X` number of seconds/minutes.



**How does the ESP-S2 improve the security profile?** 


### Different Sensors
**What might change if different sensors were connected to the ESP32?**
We don't believe that much would change in the system if a motion sensor or accelerometer was connected. Provided that the device remained stationary while connecting to the network we believe everything everything would correctly (sometimes the device will not connect if the access point and/or device is moving while trying to connect).
