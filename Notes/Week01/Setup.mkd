Set up your environment
===

Summary:
- [how to set up compile server and
  SDKs](#ltsp-linux-in-the-labs-with-arduino-ide-and-idf-sdk-on-server-vms)
- [clone your git repository locally](#working-with-your-git-repository)
- [install on your own
  machine](#installing-the-development-tools-on-other-machines) (optional)

In the lab classes we use Linux diskless LTSP machines to burn firmware to IoT
devices, but to speed up the process we also use VM (virtual machine) Ubuntu
18.04 servers for firmware compilation. Both the LTSP and the servers mount
the same disk storage as your HOME directory, so firmware binaries are easy to
access from both. (The disadvantage of this approach is that there isn't much
space in HOME, and the compile trees are quite large. Keep an eye on how much
disk you're using with `quota -s`.)

(**Note:** as discussed in the lecture, we're most able to support you if you
use the Linux option on the lab machines. You're welcome to use the windows
option instead, or to install the Arduino IDE, IDF SDK and libraries on your
own laptop -- but we won't necessarily be able to fix all problems you may
encounter if you do so, and the University Windows setup doesn't support ESP
IDF or the latest version of the Arduino IDE.)


### LTSP Linux in the labs with Arduino IDE and IDF SDK on server VMs

- boot the PC (e.g. in DIA 2.02) into "Diskless Linux" (LTSP); [more details
  and available
  locations](https://www.sheffield.ac.uk/cics/desktop/bootingltsp)
- log in
- click on the "Login to U drive and Resources" icon on the desktop
- open a terminal (using Cntrl+ALT+T for example)
- open another terminal (or tab, with Cntrl+SHIFT+T), and log in to the
  compilation VM:
    - `ssh -AX lincomp`
    - the **first time you log in** you then need to run
      `unphone-sheffield.sh` to set up your compiler and IDE (using a gitlab
      repository called
      [hamishcunningham/unphone](https://gitlab.com/hamishcunningham/unphone)
      )
- then do your compiles on the VM (either via `make` and IDF, or the Arduino
  IDE and `Sketch>Export compiled binary`) to .bin; for example in the IDE:
    - `cd unphone; make arduino-ide`
    - open the `MyThing` sketch from your gitlab repo (or open an example from
      the File menu, e.g. `File>Examples>01.Basic>Blink` and do `Save As`
      locally)
    - select the board (Adafruit ESP32 Feather) from the Tools menu
    - serial monitor baud rate should be 115200
    - (we'll look at using the IDF SDK in later weeks)
- back on the LTSP machine:
    - plug in your ESP32
    - the same disk space is mapped as your home directory, so you can then
      burn firmware to a device plugged into USB from there, e.g., if you've
      exported a binary to `~/thing.bin` and `cd`'d there:

```bash
~/unphone/bin/burn.sh thing.bin # writes the firmware to the ESP32
~/unphone/bin/listen.sh         # listens for serial line output
```

**Notes:**
- there's only space for one or two IDE builds and one or two IDF builds in
  your LTSP home space: sometimes you may need delete previous builds
- `make arduino-ide` will, when run from inside the `unphone` tree, fire up
  the Arduino IDE (version 1.9), and this will work both on the compute VMs
  (lincomp01..10) and on the LTSP desktops; in the latter case, it will be
  **slow**, but perhaps useful for serial monitoring!

<!-- TODO
- select the port (probably `/dev/ttyUSB0` or `/dev/ttyUSB1` on Ubuntu)
-->


#### Troubleshooting ssh access

- If you're logged in to a university machine, then ssh will use the ID you
  have authenticated with, e.g. ac1hc. If you're on your own machine, then you
  probably don't use that ID, and therefore need to tell ssh which to use. You
  can do this by prefixing `my-id@` to the server name you're trying to
  access, e.g. `ssh -AX ac1hc@lincomp`. Also note that you need to be inside
  the Uni firewall for this to work, so from home use the VPN.
- It is possible that you're not on the `lincomp` access control list; email
  your ID to Hamish and he'll check...


### Working with your Git repository

**Do this the first time you log in to the lab machines**:

- check out your repository from gitlab into your own file space
    - `git clone ...url...`, for example `git clone
      https://gitlab.com/YourGitLabUname/com3505-2019-student.git`
    - **don't "download"** from gitlab, you need to "clone".
    - **don't change your path on gitlab** or our scripts won't find your
      repository

**Other useful commands**:

- use `git status` to tell you what the current state of your file tree is,
  and `git diff` to show detailed changes.
- to add new files to the repository: `git add file-path`
- to commit changes all locally: `git commit -vam 'a commit log message'`
- to push committed changes back to GitLab: `git push`
- to pull down new changes from GitLab: `git pull`
- to stop the annoying messages about configuration, do the commands suggested
  (e.g. to set your email address)
- to stop having to type username/password all the time, [create an ssh key
  and register it with GitLab](https://docs.gitlab.com/ee/ssh/))
- to lower your blood pressure when subjected to ridiculous git error
  conditions: go for a walk, hum a cheery tune, or try thinking about a career
  as a florist

**Note**: git (and GitLab / GitHub) have become industry standards in recent
years, so it is important for you to get to know at least the basics. However,
an independent survey of experts recently estimated that of 2,153 git command
options fully 213% were either contradictory, confusing or error-inducing (or
all three). [I may have made that bit up.] It is depressingly easy to get git
into a mess! [I didn't make that bit up.] What to do? Here's one way to escape
from **git hell**...

Let's say you have conflicts in your com3505-student-2019 repository and the
process of resolving them is proving difficult. To re-create a clean version
of the repository (in your home directory):

```bash
cd
mv com3505-student-2019 saved-repo
git clone https://gitlab.com/YourGitLabUname/com3505-2019-student.git
```

You've now got a fresh copy to work with; if you have changes in the saved
version you can copy them over to the new, then commit and push from there.

Yes, it was called 'git' for a reason...


### Installing the development tools on other machines

If you choose to do your own
installation, instructions for the Arduino IDE and ESP32 layer can be found
here -- https://github.com/espressif/arduino-esp32#installation-instructions
-- and for the IDF here:
https://docs.espressif.com/projects/esp-idf/en/latest/get-started/

To use the `unphone` setup method:

- to install on your own machine follow the instructions here:
  https://gitlab.com/hamishcunningham/unphone#installation
- (this works on Linux and MacOS; for Windows you may need a little hacking,
  or to use an environment that supports symbolic links, e.g. Cygwin or WSL or
  Git Bash)
- set up the Arduino IDE
    - from the terminal do: `cd unphone; make arduino-ide`
    - use an external editor if you like (by setting IDE preferences
      accordingly)
    - **don't** ask the IDE to update your libraries (we'll do that via your
      gitlab repo) so uncheck `File > Preferences > Check` for updates on
      startup


<!-- OLD VERSION
- copy or link the libraries and support files for ESP32 on the Arduino IDE
    - [linux/ubuntu]:
        - open a terminal (Cntrl&Alt&T)
        - make a link to a directory called `Arduino` to pick up the Adafruit
          ESP32 Feather board definition, and the libraries that we're using
          on the course:
              - `cd; ln -s
                /resources/hc/esp-resources/esp-arduino-ide/Arduino`
        - make a link to the Arduino IDE runner script:
              - `cd; ln -s
                /resources/hc/esp-resources/esp-arduino-ide/arduino-1.8.5/arduino`
        - you can now start the Arduino IDE by running `cd; ./arduino` in a
          terminal
    - [windows]:
        - on each new machine you use:
        - is Arduino installed? if not go to Software Center and install
          Arduino-1.8.4-MSI
        - you also need a specific set of libraries which are available from
          the Software Center called `Arduino COM3505 Libraries and Hardware`
        - when you've started the IDE, make sure from `File>Preferences` that
          the `Sketchbook location` is set to your home directory, not `My
          Documents` (as this is where the libraries from the previous step
          get installed)
    - [on your own machines]:
      - install the Arduino IDE from https://www.arduino.cc/ and then follow
        the instructions at https://github.com/espressif/arduino-esp32
- you should now have something like this:
    - `com3505-2019-student/MyThing/`: your code goes here
    - `com3505-2019-student/Notes/`  : weekly notes update
    - `Arduino/`: libraries & core to support ESP32
    - from Week 2 you'll also have `com3505-2019-student/Thing/`  :
      weekly model code update
    - **NOTE**: DON'T edit the `Thing/\*` and `Notes/\*` trees!
- pair working and gitlab: both members of the pair can have copies of the
  repository and push code if that works for you, but make sure that you're
  both working with the same repository (and pushing back to origin / master)
- set up the Arduino IDE
    - from the Linux terminal do: `./arduino`
    - from Windows use the start menu to run `Arduino 1.8.4`
    - use an external editor if you like
    - **don't** ask the IDE to update your libraries (we'll do that via your
      gitlab repo) so uncheck File > Preferences > Check for updates on
      startup
- get ready to code
    - plug in your ESP32
    - open the MyThing sketch
    - select the board (Adafruit ESP32 Feather) from the Tools menu
    - select the port (probably `/dev/ttyUSB0` or `/dev/ttyUSB1` on Ubuntu)
    - serial monitor baud rate should be 115200
-->

<!-- OLD OLD VERSION
        - in the top left of your desktop (possibly hidden by the browser) you
          should have an icon "Access-U-drive"; click on it and enter your
          password
        - you should now have "Access-Shared-Resources"; click on it
        - open a terminal (Cntrl&Alt&T)
        - create a link to your U drive filespace and move there:
            - `cd; ln -s $U u-drive`
            - `cd u-drive`
        - unpack the Arduino libraries and compiler chain:
            - `tar xvzf /mnt/resources/arduino/Public/Arduino.tgz`
        - in your home directory make a link to the Arduino directory that you
          just created:
            - `cd; ln -s u-drive/Arduino`
-->
